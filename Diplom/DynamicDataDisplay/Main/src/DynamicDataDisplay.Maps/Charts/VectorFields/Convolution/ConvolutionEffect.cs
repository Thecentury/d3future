//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Research.DynamicDataDisplay.Maps.Charts.VectorFields.Convolution
{
    using System;
    using System.Windows;
    using System.Windows.Media;
    using System.Windows.Media.Effects;
    using System.Windows.Media.Media3D;
    
    
    /// <summary>A simple color blending shader for WPF.</summary>
    public class ConvolutionEffect : System.Windows.Media.Effects.ShaderEffect
    {
        
        /// <summary></summary>
        public static readonly DependencyProperty MinXProperty = DependencyProperty.Register("MinX", typeof(System.Single), typeof(ConvolutionEffect), new UIPropertyMetadata((float)0, PixelShaderConstantCallback(0)));
        /// <summary></summary>
        public static readonly DependencyProperty MinYProperty = DependencyProperty.Register("MinY", typeof(System.Single), typeof(ConvolutionEffect), new UIPropertyMetadata((float)0, PixelShaderConstantCallback(1)));
        /// <summary></summary>
        public static readonly DependencyProperty MaxXProperty = DependencyProperty.Register("MaxX", typeof(System.Single), typeof(ConvolutionEffect), new UIPropertyMetadata((float)0, PixelShaderConstantCallback(2)));
        /// <summary></summary>
        public static readonly DependencyProperty MaxYProperty = DependencyProperty.Register("MaxY", typeof(System.Single), typeof(ConvolutionEffect), new UIPropertyMetadata((float)0, PixelShaderConstantCallback(3)));
        /// <summary></summary>
        public static readonly DependencyProperty WidthProperty = DependencyProperty.Register("Width", typeof(System.Single), typeof(ConvolutionEffect), new UIPropertyMetadata((float)0, PixelShaderConstantCallback(4)));
        /// <summary></summary>
        public static readonly DependencyProperty HeightProperty = DependencyProperty.Register("Height", typeof(System.Single), typeof(ConvolutionEffect), new UIPropertyMetadata((float)0, PixelShaderConstantCallback(6)));
        /// <summary></summary>
        public static readonly DependencyProperty MinLengthProperty = DependencyProperty.Register("MinLength", typeof(System.Single), typeof(ConvolutionEffect), new UIPropertyMetadata((float)0, PixelShaderConstantCallback(7)));
        /// <summary></summary>
        public static readonly DependencyProperty MaxLengthProperty = DependencyProperty.Register("MaxLength", typeof(System.Single), typeof(ConvolutionEffect), new UIPropertyMetadata((float)0, PixelShaderConstantCallback(8)));
        /// <summary>The implicit input sampler passed into the pixel shader by WPF.</summary>
        public static readonly DependencyProperty InputProperty = ShaderEffect.RegisterPixelShaderSamplerProperty("Input", typeof(ConvolutionEffect), 0, SamplingMode.Auto);
        /// <summary></summary>
        public static readonly DependencyProperty NoizeProperty = ShaderEffect.RegisterPixelShaderSamplerProperty("Noize", typeof(ConvolutionEffect), 1, SamplingMode.Auto);
        /// <summary></summary>
        public static readonly DependencyProperty FieldProperty = ShaderEffect.RegisterPixelShaderSamplerProperty("Field", typeof(ConvolutionEffect), 2, SamplingMode.Auto);
        /// <summary></summary>
        public static readonly DependencyProperty PaletteProperty = ShaderEffect.RegisterPixelShaderSamplerProperty("Palette", typeof(ConvolutionEffect), 3, SamplingMode.Auto);
        
        public ConvolutionEffect()
        {
            PixelShader pixelShader = new PixelShader();
            pixelShader.UriSource = new Uri("pack://application:,,,/DynamicDataDisplay.Maps;component/Charts/VectorFields/Convolution/ConvolutionEffect.ps", UriKind.Absolute);
            this.PixelShader = pixelShader;
            this.UpdateShaderValue(MinXProperty);
            this.UpdateShaderValue(MinYProperty);
            this.UpdateShaderValue(MaxXProperty);
            this.UpdateShaderValue(MaxYProperty);
            this.UpdateShaderValue(WidthProperty);
            this.UpdateShaderValue(HeightProperty);
            this.UpdateShaderValue(MinLengthProperty);
            this.UpdateShaderValue(MaxLengthProperty);
            this.UpdateShaderValue(InputProperty);
            this.UpdateShaderValue(NoizeProperty);
            this.UpdateShaderValue(FieldProperty);
            this.UpdateShaderValue(PaletteProperty);
        }
        
        /// <summary></summary>
        public virtual float MinX
        {
            get
            {
                return ((float)(this.GetValue(MinXProperty)));
            }
            set
            {
                this.SetValue(MinXProperty, value);
            }
        }
        
        /// <summary></summary>
        public virtual float MinY
        {
            get
            {
                return ((float)(this.GetValue(MinYProperty)));
            }
            set
            {
                this.SetValue(MinYProperty, value);
            }
        }
        
        /// <summary></summary>
        public virtual float MaxX
        {
            get
            {
                return ((float)(this.GetValue(MaxXProperty)));
            }
            set
            {
                this.SetValue(MaxXProperty, value);
            }
        }
        
        /// <summary></summary>
        public virtual float MaxY
        {
            get
            {
                return ((float)(this.GetValue(MaxYProperty)));
            }
            set
            {
                this.SetValue(MaxYProperty, value);
            }
        }
        
        /// <summary></summary>
        public virtual float Width
        {
            get
            {
                return ((float)(this.GetValue(WidthProperty)));
            }
            set
            {
                this.SetValue(WidthProperty, value);
            }
        }
        
        /// <summary></summary>
        public virtual float Height
        {
            get
            {
                return ((float)(this.GetValue(HeightProperty)));
            }
            set
            {
                this.SetValue(HeightProperty, value);
            }
        }
        
        /// <summary></summary>
        public virtual float MinLength
        {
            get
            {
                return ((float)(this.GetValue(MinLengthProperty)));
            }
            set
            {
                this.SetValue(MinLengthProperty, value);
            }
        }
        
        /// <summary></summary>
        public virtual float MaxLength
        {
            get
            {
                return ((float)(this.GetValue(MaxLengthProperty)));
            }
            set
            {
                this.SetValue(MaxLengthProperty, value);
            }
        }
        
        /// <summary>The implicit input sampler passed into the pixel shader by WPF.</summary>
        public virtual System.Windows.Media.Brush Input
        {
            get
            {
                return ((System.Windows.Media.Brush)(this.GetValue(InputProperty)));
            }
            set
            {
                this.SetValue(InputProperty, value);
            }
        }
        
        /// <summary></summary>
        public virtual System.Windows.Media.Brush Noize
        {
            get
            {
                return ((System.Windows.Media.Brush)(this.GetValue(NoizeProperty)));
            }
            set
            {
                this.SetValue(NoizeProperty, value);
            }
        }
        
        /// <summary></summary>
        public virtual System.Windows.Media.Brush Field
        {
            get
            {
                return ((System.Windows.Media.Brush)(this.GetValue(FieldProperty)));
            }
            set
            {
                this.SetValue(FieldProperty, value);
            }
        }
        
        /// <summary></summary>
        public virtual System.Windows.Media.Brush Palette
        {
            get
            {
                return ((System.Windows.Media.Brush)(this.GetValue(PaletteProperty)));
            }
            set
            {
                this.SetValue(PaletteProperty, value);
            }
        }
    }
}
